@page "/"
@page "/pizzas"

@using PizzaStoreApp.Shared.Models
@inject PizzaStoreApp.Client.Services.PizzaService PizzaService
@inject IJSRuntime JS



@if (error != null)
{
    <p class="text-danger">Erreur : @error</p>
}
else
{
    <div class="container">

        @if (pizzas == null)
        {

            <h1 id="title">Liste des pizzas 🍕</h1>
            <p>Chargement...</p>

        }
        else if (!pizzas.Any())
        {

            <h1 id="title">Liste des pizzas 🍕</h1>
            <p>Aucune pizza trouvée</p>

        }
        else
        {

            <h1 id="title">Liste des pizzas 🍕</h1>
            <div class="pizza-caracteristics">
                <h4>Nom</h4>
                <h4>Prix</h4>
                <h4>Sans gluten</h4>
                <h4>Modif./Suppr.</h4>
            </div>

            <ul>
                @foreach (var pizza in pizzas)
                {
                    <li>
                        <p>@pizza.Name</p>
                        <p>@pizza.Price €</p>
                        <p>@(@pizza.IsGlutenFree ? "✅" : "❌")</p>
                        @if (!showForm)
                        {
                            <div>
                                <button class="update" @onclick="() => StartEditing(pizza)">
                                    <svg viewBox="0 0 24 24" fill="none" height="23px" width="23px" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M11 4H7.2C6.0799 4 5.51984 4 5.09202 4.21799C4.71569 4.40974 4.40973 4.7157 4.21799 5.09202C4 5.51985 4 6.0799 4 7.2V16.8C4 17.9201 4 18.4802 4.21799 18.908C4.40973 19.2843 4.71569 19.5903 5.09202 19.782C5.51984 20 6.0799 20 7.2 20H16.8C17.9201 20 18.4802 20 18.908 19.782C19.2843 19.5903 19.5903 19.2843 19.782 18.908C20 18.4802 20 17.9201 20 16.8V12.5M15.5 5.5L18.3284 8.32843M10.7627 10.2373L17.411 3.58902C18.192 2.80797 19.4584 2.80797 20.2394 3.58902C21.0205 4.37007 21.0205 5.6364 20.2394 6.41745L13.3774 13.2794C12.6158 14.0411 12.235 14.4219 11.8012 14.7247C11.4162 14.9936 11.0009 15.2162 10.564 15.3882C10.0717 15.582 9.54378 15.6885 8.48793 15.9016L8 16L8.04745 15.6678C8.21536 14.4925 8.29932 13.9048 8.49029 13.3561C8.65975 12.8692 8.89125 12.4063 9.17906 11.9786C9.50341 11.4966 9.92319 11.0768 10.7627 10.2373Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                </button>

                                <button class="delete" @onclick="() => DeletePizza(pizza.Id)">
                                    <svg fill="#000000" height="20px" width="20px" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 315 315" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 315 315"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="m256.774,23.942h-64.836v-6.465c0-9.636-7.744-17.477-17.263-17.477h-34.348c-9.521,0-17.266,7.841-17.266,17.478v6.465h-64.835c-9.619,0-17.445,7.76-17.445,17.297v11.429c0,7.168 4.42,13.33 10.698,15.951 1.989,39.623 13.5,231.193 14.018,239.801 0.222,3.696 3.284,6.58 6.987,6.58h170.033c3.703,0 6.766-2.884 6.987-6.58 0.518-8.607 12.028-200.178 14.018-239.801 6.278-2.621 10.698-8.783 10.698-15.951v-11.43c5.68434e-14-9.537-7.826-17.297-17.446-17.297zm-119.713-6.464c0-1.918 1.465-3.478 3.266-3.478h34.348c1.8,0 3.264,1.56 3.264,3.478v6.465h-40.877v-6.465zm-82.282,23.761c0-1.818 1.546-3.297 3.445-3.297h198.549c1.899,0 3.445,1.478 3.445,3.297v11.429c0,1.819-1.546,3.299-3.445,3.299h-198.548c-1.899,0-3.445-1.479-3.445-3.299v-11.429zm181.143,259.761h-156.848c-2.055-34.247-11.479-191.674-13.51-231.033h183.867c-2.031,39.359-11.454,196.786-13.509,231.033z"></path> <path d="m157.5,95.125c-3.866,0-7,3.134-7,7v176.109c0,3.866 3.134,7 7,7 3.866,0 7-3.134 7-7v-176.109c0-3.866-3.134-7-7-7z"></path> <path d="m110.2,102.04c-0.202-3.86-3.507-6.837-7.355-6.625-3.86,0.201-6.827,3.494-6.625,7.355l9.182,175.829c0.195,3.736 3.285,6.635 6.984,6.635 0.123,0 0.247-0.003 0.371-0.01 3.86-0.201 6.827-3.494 6.625-7.355l-9.182-175.829z"></path> <path d="m212.155,95.415c-3.899-0.223-7.153,2.764-7.355,6.625l-9.184,175.829c-0.202,3.861 2.765,7.154 6.625,7.355 0.125,0.007 0.248,0.01 0.371,0.01 3.698,0 6.789-2.898 6.984-6.635l9.184-175.829c0.202-3.861-2.764-7.154-6.625-7.355z"></path> </g> </g></svg>
                                </button>
                            </div>
                        }
                        else
                        {
                            <div>
                                <button class="update grayed" disabled>
                                    <svg viewBox="0 0 24 24" fill="none" height="23px" width="23px" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M11 4H7.2C6.0799 4 5.51984 4 5.09202 4.21799C4.71569 4.40974 4.40973 4.7157 4.21799 5.09202C4 5.51985 4 6.0799 4 7.2V16.8C4 17.9201 4 18.4802 4.21799 18.908C4.40973 19.2843 4.71569 19.5903 5.09202 19.782C5.51984 20 6.0799 20 7.2 20H16.8C17.9201 20 18.4802 20 18.908 19.782C19.2843 19.5903 19.5903 19.2843 19.782 18.908C20 18.4802 20 17.9201 20 16.8V12.5M15.5 5.5L18.3284 8.32843M10.7627 10.2373L17.411 3.58902C18.192 2.80797 19.4584 2.80797 20.2394 3.58902C21.0205 4.37007 21.0205 5.6364 20.2394 6.41745L13.3774 13.2794C12.6158 14.0411 12.235 14.4219 11.8012 14.7247C11.4162 14.9936 11.0009 15.2162 10.564 15.3882C10.0717 15.582 9.54378 15.6885 8.48793 15.9016L8 16L8.04745 15.6678C8.21536 14.4925 8.29932 13.9048 8.49029 13.3561C8.65975 12.8692 8.89125 12.4063 9.17906 11.9786C9.50341 11.4966 9.92319 11.0768 10.7627 10.2373Z" stroke="#d8d8d8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                </button>

                                <button class="delete grayed" disabled>
                                    <svg fill="#d8d8d8" height="20px" width="20px" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 315 315" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 315 315"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="m256.774,23.942h-64.836v-6.465c0-9.636-7.744-17.477-17.263-17.477h-34.348c-9.521,0-17.266,7.841-17.266,17.478v6.465h-64.835c-9.619,0-17.445,7.76-17.445,17.297v11.429c0,7.168 4.42,13.33 10.698,15.951 1.989,39.623 13.5,231.193 14.018,239.801 0.222,3.696 3.284,6.58 6.987,6.58h170.033c3.703,0 6.766-2.884 6.987-6.58 0.518-8.607 12.028-200.178 14.018-239.801 6.278-2.621 10.698-8.783 10.698-15.951v-11.43c5.68434e-14-9.537-7.826-17.297-17.446-17.297zm-119.713-6.464c0-1.918 1.465-3.478 3.266-3.478h34.348c1.8,0 3.264,1.56 3.264,3.478v6.465h-40.877v-6.465zm-82.282,23.761c0-1.818 1.546-3.297 3.445-3.297h198.549c1.899,0 3.445,1.478 3.445,3.297v11.429c0,1.819-1.546,3.299-3.445,3.299h-198.548c-1.899,0-3.445-1.479-3.445-3.299v-11.429zm181.143,259.761h-156.848c-2.055-34.247-11.479-191.674-13.51-231.033h183.867c-2.031,39.359-11.454,196.786-13.509,231.033z"></path> <path d="m157.5,95.125c-3.866,0-7,3.134-7,7v176.109c0,3.866 3.134,7 7,7 3.866,0 7-3.134 7-7v-176.109c0-3.866-3.134-7-7-7z"></path> <path d="m110.2,102.04c-0.202-3.86-3.507-6.837-7.355-6.625-3.86,0.201-6.827,3.494-6.625,7.355l9.182,175.829c0.195,3.736 3.285,6.635 6.984,6.635 0.123,0 0.247-0.003 0.371-0.01 3.86-0.201 6.827-3.494 6.625-7.355l-9.182-175.829z"></path> <path d="m212.155,95.415c-3.899-0.223-7.153,2.764-7.355,6.625l-9.184,175.829c-0.202,3.861 2.765,7.154 6.625,7.355 0.125,0.007 0.248,0.01 0.371,0.01 3.698,0 6.789-2.898 6.984-6.635l9.184-175.829c0.202-3.861-2.764-7.154-6.625-7.355z"></path> </g> </g></svg>
                                </button>
                            </div>
                        }

                    </li>

                }
            </ul>

        }

        @if (!showForm)
        {
            <button class="show" id="Add" @onclick="ToggleForm">Ajouter</button>
        }
        else
        {
            <EditForm Model="formPizza" OnValidSubmit="SubmitForm">


                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label>Nom :</label>
                    <InputText class="form-control" placeholder="Max. 20 caractères" @bind-Value="formPizza.Name" oninput="@OnNameChanged" />

                    @if (!string.IsNullOrWhiteSpace(formPizza.Name))
                    {
                        @if (formPizza.Name.Length < 2)
                        {
                            <p class="invalid-form">Minimum 2 caractères.</p>
                        }
                        @if (formPizza.Name.Length > 20)
                        {
                            <p class="invalid-form">Maximum 20 caractères.</p>
                        }
                        @if(NameExists)
                        {
                            <p class="invalid-form">Ce nom existe déja.</p>
                        }
                    }

                </div>

                <div class="mb-3">
                    <label>Prix (€) :</label>
                    <InputNumber class="form-control" placeholder="Entre 8€ et 18€" @bind-Value="formPizza.Price" oninput="@OnPriceChanged" />

                    @if (formPizza.Price < 8 && formPizza.Price != null)
                    {
                        <p class="invalid-form">Le prix est inférieur à 8€.</p>
                    }
                    @if (formPizza.Price > 18 && formPizza.Price != null)
                    {
                        <p class="invalid-form">Le prix est supérieur à 18€.</p>
                    }

                </div>

                <div class="mb-3">
                    <label><InputCheckbox @bind-Value="formPizza.IsGlutenFree" /> Sans gluten</label>
                </div>
                <div class="d-flex">
                    @if (IsValidForm)
                    {
                        <button type="submit" class="create">@(pizzaToEdit is null ? "Créer" : "Modifier")</button>
                    }
                    else
                    {
                        <button class="create-disabled" disabled>@(pizzaToEdit is null ? "Créer" : "Modifier")</button>
                    }


                    <button class="hide" @onclick="ToggleForm">Annuler</button>
                </div>
            </EditForm>
        }
    </div>
}

@code {
    bool showForm = false;

    bool IsValidForm =>
        formPizza.Price is >= 8 and <= 18 &&
        !string.IsNullOrWhiteSpace(formPizza.Name) &&
        formPizza.Name.Length is >= 2 and <= 20 && !NameExists;

    bool NameExists =>
     pizzas != null &&
     pizzas.Any(p =>
         string.Equals(p.Name.Trim(), formPizza.Name.Trim(), StringComparison.OrdinalIgnoreCase)
         && (pizzaToEdit == null || p.Id != pizzaToEdit.Id));


    Pizza formPizza = new();
    Pizza? pizzaToEdit = null;


    List<Pizza>? pizzas;
    string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pizzas = await PizzaService.GetAllAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task ToggleForm()
    {
        showForm = !showForm;
        pizzaToEdit = null;
        formPizza = new();

        if (showForm)
        {
            
            await JS.InvokeVoidAsync("scrollToBottom");
        }
        else
        {
            await JS.InvokeVoidAsync("scrollToElement", "title");
        }

    }




    async Task DeletePizza(int id)
    {
        try
        {
            await PizzaService.DeleteAsync(id);
            pizzas = await PizzaService.GetAllAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void StartEditing(Pizza pizza)
    {
        pizzaToEdit = pizza;
        formPizza = new Pizza
            {
                Id = pizza.Id,
                Name = pizza.Name,
                Price = pizza.Price,
                IsGlutenFree = pizza.IsGlutenFree
            };
        showForm = true;
    }


    async Task SubmitForm()
    {
        try
        {
            if (pizzaToEdit is not null)
            {
                await PizzaService.UpdateAsync(formPizza);
            }
            else
            {
                await PizzaService.CreateAsync(formPizza);
            }

            pizzas = await PizzaService.GetAllAsync();
            ToggleForm();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void OnNameChanged(ChangeEventArgs e)
    {
        formPizza.Name = e.Value?.ToString();
    }

    private void OnPriceChanged(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var result))
        {
            formPizza.Price = result;
        }

    }

}
