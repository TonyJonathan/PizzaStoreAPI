@page "/"
@page "/pizzas"

@using PizzaStoreApp.Shared.Models
@inject PizzaStoreApp.Client.Services.PizzaService PizzaService






@if (error != null)
{
    <p class="text-danger">Erreur : @error</p>
}
else if (pizzas == null)
{
    <div class="container">
        <h3>Liste des pizzas 🍕</h3>
        <p>Chargement...</p>
    </div>
}
else if (!pizzas.Any())
{
    <div class="container">
        <h3>Liste des pizzas 🍕</h3>
        <p>Aucune pizza trouvée</p>
    </div>
}
else
{   
    <div class="container">
        <h3>Liste des pizzas 🍕</h3>
        <div class="pizza-caracteristics">
            <h4>Nom</h4>
            <h4>Prix</h4>
            <h4>Sans gluten</h4>
            <h4>Modif./Suppr.</h4>
        </div>

        <ul>
            @foreach (var pizza in pizzas)
            {
                <li>
                    <p>@pizza.Name</p>
                    <p>@pizza.Price €</p>
                    <p>@(@pizza.IsGlutenFree ? "✅" : "❌")</p>
                    <div>
                        <button class="delete" @onclick="() => DeletePizza(pizza.Id)">
                            <svg fill="#000000" height="20px" width="20px" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 315 315" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 315 315"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path d="m256.774,23.942h-64.836v-6.465c0-9.636-7.744-17.477-17.263-17.477h-34.348c-9.521,0-17.266,7.841-17.266,17.478v6.465h-64.835c-9.619,0-17.445,7.76-17.445,17.297v11.429c0,7.168 4.42,13.33 10.698,15.951 1.989,39.623 13.5,231.193 14.018,239.801 0.222,3.696 3.284,6.58 6.987,6.58h170.033c3.703,0 6.766-2.884 6.987-6.58 0.518-8.607 12.028-200.178 14.018-239.801 6.278-2.621 10.698-8.783 10.698-15.951v-11.43c5.68434e-14-9.537-7.826-17.297-17.446-17.297zm-119.713-6.464c0-1.918 1.465-3.478 3.266-3.478h34.348c1.8,0 3.264,1.56 3.264,3.478v6.465h-40.877v-6.465zm-82.282,23.761c0-1.818 1.546-3.297 3.445-3.297h198.549c1.899,0 3.445,1.478 3.445,3.297v11.429c0,1.819-1.546,3.299-3.445,3.299h-198.548c-1.899,0-3.445-1.479-3.445-3.299v-11.429zm181.143,259.761h-156.848c-2.055-34.247-11.479-191.674-13.51-231.033h183.867c-2.031,39.359-11.454,196.786-13.509,231.033z"></path> <path d="m157.5,95.125c-3.866,0-7,3.134-7,7v176.109c0,3.866 3.134,7 7,7 3.866,0 7-3.134 7-7v-176.109c0-3.866-3.134-7-7-7z"></path> <path d="m110.2,102.04c-0.202-3.86-3.507-6.837-7.355-6.625-3.86,0.201-6.827,3.494-6.625,7.355l9.182,175.829c0.195,3.736 3.285,6.635 6.984,6.635 0.123,0 0.247-0.003 0.371-0.01 3.86-0.201 6.827-3.494 6.625-7.355l-9.182-175.829z"></path> <path d="m212.155,95.415c-3.899-0.223-7.153,2.764-7.355,6.625l-9.184,175.829c-0.202,3.861 2.765,7.154 6.625,7.355 0.125,0.007 0.248,0.01 0.371,0.01 3.698,0 6.789-2.898 6.984-6.635l9.184-175.829c0.202-3.861-2.764-7.154-6.625-7.355z"></path> </g> </g></svg>
                        </button>
                    </div>
                </li>
               
            }
        </ul>

        @if (!showForm)
        {
            <button class="show" @onclick="ToggleForm">Ajouter</button>
        }
        else
        {
            @if (showForm)
            {
                <EditForm Model="newPizza" OnValidSubmit="CreatePizza">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label>Nom :</label>
                        <InputText class="form-control" placeholder="Max. 20 caractères" @bind-Value="newPizza.Name" />

                        @if (!string.IsNullOrWhiteSpace(newPizza.Name) && newPizza.Name.Length < 2)
                        {
                            <p class="invalid-form">Minimum 2 caractères.</p>
                        }
                        @if (!string.IsNullOrWhiteSpace(newPizza.Name) && newPizza.Name.Length > 20)
                        {
                            <p class="invalid-form">Maximum 20 caractères.</p>
                        }

                    </div>

                    <div class="mb-3">
                        <label>Prix (€) :</label>
                        <InputNumber class="form-control" placeholder="Entre 8€ et 18€" @bind-Value="newPizza.Price" />

                        @if (newPizza.Price < 8 && newPizza.Price != null)
                        {
                            <p class="invalid-form">Le prix est inférieur à 8€.</p>
                        }
                        @if (newPizza.Price > 18 && newPizza.Price != null)
                        {
                            <p class="invalid-form">Le prix est supérieur à 18€.</p>
                        }

                    </div>

                    <div class="mb-3">
                        <label><InputCheckbox @bind-Value="newPizza.IsGlutenFree" /> Sans gluten</label>
                    </div>
                    <div class="d-flex">
                        @if(IsValidForm)
                        {
                            <button type="submit" class="create">Créer</button>
                        }
                        else
                        {
                            <button class="create-disabled" disabled>Créer</button>
                        }

                        <button class="hide" @onclick="ToggleForm">Annuler</button>
                    </div>
                </EditForm>
            }

        }
    </div>

}

@code {
    bool showForm = false;
    Pizza newPizza = new();
    bool IsValidForm =>
        newPizza.Price is >= 8 and <= 18 &&
        !string.IsNullOrWhiteSpace(newPizza.Name) &&
        newPizza.Name.Length is >= 2 and <= 20;

    List<Pizza>? pizzas;
    string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pizzas = await PizzaService.GetAllAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void ToggleForm()
    {
        showForm = !showForm;
        newPizza = new(); // Réinitialiser le formulaire
    }

    async Task CreatePizza()
    {
        try
        {
            await PizzaService.CreateAsync(newPizza);
            pizzas = await PizzaService.GetAllAsync(); // Refresh la liste
            showForm = false;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    async Task DeletePizza(int id)
    {
        try
        {
            await PizzaService.DeleteAsync(id);
            pizzas = await PizzaService.GetAllAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        Console.WriteLine(id);
    }

}
